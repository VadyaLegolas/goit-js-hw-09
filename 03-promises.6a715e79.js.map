{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,gBAAiBF,SAASC,cAAc,uBACxCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,UAAWL,SAASC,cAAc,0BAGpCH,EAAKO,UAAUC,iBAAiB,SAKhC,SAA0BC,GACxBA,EAAEC,iBACFC,EAASC,OAAOZ,EAAKM,YAAYO,OACjCC,EAAQF,OAAOZ,EAAKI,gBAAgBS,OACpCE,EAAOH,OAAOZ,EAAKK,UAAUQ,OAC7B,IAAK,IAAIG,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCC,EAAcD,EAAGF,GACdI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALG,MACjBxB,EAAAyB,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,MAAK,CAC9DK,cAAY,G,IAGjBC,OAAM,SAAAR,G,IAAGC,EAAQD,EAARC,SAAUQ,EAAKT,EAALG,MAClBxB,EAAAyB,OAAOM,QAAQ,sBAAqCJ,OAAfL,EAAS,QAAYK,OAANG,EAAM,MAAK,CAC7DF,cAAc,G,IAGpBZ,GAASC,C,IArBb,IAAIJ,EAAS,EACTI,EAAO,EACPD,EAAQ,EAuBZ,SAASG,EAAcG,EAAUU,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEf,WAAUE,MAAAQ,IAGpBM,EAAO,CAAEhB,WAAUE,MAAAQ,G,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\nlet amount = 0;\nlet step = 0;\nlet delay = 0;\n\nfunction onSubmitBtnClick(e) {\n  e.preventDefault();\n  amount = Number(refs.amountInput.value);\n  delay = Number(refs.firstDelayInput.value);\n  step = Number(refs.stepInput.value);\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n        });\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelayInput","stepInput","amountInput","submitBtn","addEventListener","e","preventDefault","$ce04d3a99e08e73b$var$amount","Number","value","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay1","delay","Notify","success","concat","clickToClose","catch","delay2","failure","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.6a715e79.js.map"}